{"version":3,"file":"background.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://codingshodkk-extension/webpack/bootstrap","webpack://codingshodkk-extension/webpack/runtime/make namespace object","webpack://codingshodkk-extension/./src/background/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// // get current tab\n// chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n//   const tab = tabs[0];\n//   const url = tab.url;\n//   const title = tab.title;\n//   const favicon = tab.favIconUrl;\n//   // save data\n//   const data = {\n//     url,\n//     title,\n//     favicon,\n//   };\n//   chrome.storage.sync.set({ data }, () => {\n//     console.log(\"Data saved\");\n//   });\n//   // send message to content script\n//   chrome.tabs.sendMessage(tab.id, { message: url });\n// });\n// chrome.commands.onCommand.addListener(function (e) {\n//   if (e === \"open_popup\") {\n//     chrome.tabs.query({ active: true, currentWindow: true }, ([tab]) => {\n//       const isSpecialPage =\n//         tab.url === \"chrome://newtab/\" ||\n//         tab.url === \"chrome-search://local-ntp/local-ntp.html\";\n//       if (isSpecialPage) {\n//         chrome.tabs.remove(tab.id, () => {\n//           chrome.tabs.create({ url: \"popup.html\" });\n//         });\n//       } else {\n//         chrome.scripting.executeScript({\n//           target: { tabId: tab.id },\n//           files: [\"popup.js\"],\n//         });\n//       }\n//     });\n//   }\n// });\n// chrome.runtime.onInstalled.addListener(() => {\n//   console.log(\"Extension installed\");\n// });\n// chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n//   if (message.action === \"getPageContent\") {\n//     chrome.scripting.executeScript(\n//       {\n//         target: { tabId: message.tabId },\n//         func: () => {\n//           return {\n//             body: document.body.innerText,\n//             title: document.title,\n//           };\n//         },\n//       },\n//       (results) => {\n//         sendResponse(results[0].result);\n//       }\n//     );\n//     return true; // Will respond asynchronously.\n//   }\n// });\n// // new\n// // Create context menu\n// chrome.runtime.onInstalled.addListener(() => {\n//   chrome.contextMenus.create({\n//     id: \"saveBookmark\",\n//     title: \"Save Bookmark\",\n//     contexts: [\"page\", \"selection\", \"link\"]\n//   });\n//   chrome.contextMenus.create({\n//     id: \"summarizePage\",\n//     title: \"Summarize Page\",\n//     contexts: [\"page\"]\n//   });\n//   chrome.contextMenus.create({\n//     id: \"addJournalEntry\",\n//     title: \"Add Journal Entry\",\n//     contexts: [\"page\", \"selection\"]\n//   });\n// });\n// // Handle context menu actions\n// chrome.contextMenus.onClicked.addListener((info, tab) => {\n//   if (info.menuItemId === \"saveBookmark\") {\n//     saveBookmark(tab.url, tab.title);\n//   } else if (info.menuItemId === \"summarizePage\") {\n//     summarizePage(tab.url);\n//   } else if (info.menuItemId === \"addJournalEntry\") {\n//     addJournalEntry(info.selectionText);\n//   }\n// });\n// // function saveBookmark(url, title) {\n// //   // Save the bookmark logic\n// //   console.log(\"Saving bookmark:\", url, title);\n// //   // Implement your saving logic here\n// // }\n// function summarizePage(url) {\n//   // Summarize the page logic\n//   console.log(\"Summarizing page:\", url);\n//   // Implement your summarization logic here\n// }\n// function addJournalEntry(selectionText) {\n//   // Add journal entry logic\n//   console.log(\"Adding journal entry:\", selectionText);\n//   // Implement your journal entry logic here\n// }\n// function saveBookmark(url, title) {\n//   const data = { url, title };\n//   chrome.storage.sync.set({ data }, () => {\n//     console.log(\"Data saved\");\n//     // Send message to popup\n//     // chrome.runtime.sendMessage({ action: \"bookmarkSaved\", data: data });\n//     chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n//       console.log(tabs)\n//       const tabId = tabs[0]?.id;\n//       chrome.scripting.executeScript({\n//         target: { tabId: tabId },\n//         files: ['content.js']\n//       }, () => {\n//         chrome.tabs.sendMessage(tabId, { action: \"bookmarkSaved\", data: data });\n//       });\n//     });\n//   });\n// }\nfunction saveBookmark(url, title, tab, text, link) {\n    const data = { url, title, favicon: tab.favIconUrl, text, link };\n    console.log({\n        data,\n        tab,\n        url,\n        text,\n    });\n    // chrome.storage.sync.set({ data }, () => {\n    //   console.log(\"Data saved\");\n    //   // saveBookmarkCallApi(data).then(() => {\n    //   //   console.log(\"Bookmark saved successfully!\");\n    //   // }\n    //   // );\n    //   chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n    //     const tabId = tab.id;\n    //     // Use chrome.scripting.executeScript\n    //     chrome.scripting.executeScript(\n    //       {\n    //         target: { tabId: tabId },\n    //         files: [\"contentScript.js\"],\n    //       },\n    //       () => {\n    //         if (chrome.runtime.lastError) {\n    //           console.error(chrome.runtime.lastError.message);\n    //         } else {\n    //           console.log(\"186\");\n    //           console.log(\"186\");\n    //           console.log(\"186\");\n    //           // saveBookmarkCallApi(data).then(() => {\n    //           //   console.log(\"Bookmark saved successfully!\");\n    //           // }\n    //           // );\n    //           chrome.tabs.sendMessage(\n    //             tabId,\n    //             { action: \"bookmarkSaved\", data: data },\n    //             (response) => {\n    //               if (chrome.runtime.lastError) {\n    //                 console.error(chrome.runtime.lastError.message);\n    //               } else {\n    //                 console.log(\"194\");\n    //                 console.log(\"194\");\n    //                 console.log(\"194\");\n    //                 console.log(\"194\");\n    //                 console.log(\"Message sent successfully\");\n    //               }\n    //             }\n    //           );\n    //         }\n    //       }\n    //     );\n    //   });\n    // });\n    chrome.storage.sync.set({ data }, () => {\n        console.log(\"Data saved\");\n        chrome.storage.local.get(['contentScriptInjected'], (result) => {\n            if (!result.contentScriptInjected) {\n                // Inject content script if not already injected\n                chrome.scripting.executeScript({\n                    target: { tabId: tab.id },\n                    files: [\"contentScript.js\"],\n                }, () => {\n                    if (chrome.runtime.lastError) {\n                        console.error(chrome.runtime.lastError.message);\n                    }\n                    else {\n                        // Set flag in storage\n                        chrome.storage.local.set({ contentScriptInjected: true }, () => {\n                            console.log(\"Content script injected and flag set.\");\n                            sendMessageToContentScript(tab.id, data);\n                        });\n                    }\n                });\n            }\n            else {\n                // If already injected, just send the message\n                console.log(\"Content script already injected.\");\n                sendMessageToContentScript(tab.id, data);\n            }\n        });\n    });\n}\nfunction sendMessageToContentScript(tabId, data) {\n    chrome.tabs.sendMessage(tabId, { action: \"bookmarkSaved\", data: data }, (response) => {\n        if (chrome.runtime.lastError) {\n            console.error(chrome.runtime.lastError.message);\n        }\n        else {\n            console.log(\"Message sent successfully\");\n        }\n    });\n}\n// Existing code...\nchrome.runtime.onInstalled.addListener(() => {\n    console.log(\"Extension installed\");\n    chrome.contextMenus.create({\n        id: \"saveBookmark\",\n        title: \"Save Bookmark\",\n        contexts: [\"page\", \"selection\", \"link\", \"all\"],\n    });\n    chrome.contextMenus.create({\n        id: \"summarizePage\",\n        title: \"Summarize Page\",\n        contexts: [\"page\", \"selection\", \"link\", \"all\"],\n    });\n    chrome.contextMenus.create({\n        id: \"addJournalEntry\",\n        title: \"Add Journal Entry\",\n        contexts: [\"all\", \"page\", \"selection\", \"link\"],\n    });\n    chrome.contextMenus.create({\n        id: \"summarizePage\",\n        title: \"Summarize Page\",\n        contexts: [\"page\", \"selection\", \"link\", \"all\"],\n    });\n});\n// Handle context menu actions\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n    if (info.menuItemId === \"saveBookmark\") {\n        if (tab) {\n            // saveBookmark(tab.url, tab.title, tab);\n            chrome.scripting.executeScript({\n                target: { tabId: tab.id },\n                func: () => window.getSelection().toString(),\n            }, (results) => {\n                const selectedText = results[0].result;\n                saveBookmark(tab.url, tab.title, tab, selectedText, info.linkUrl);\n            });\n        }\n        else {\n            console.error(\"Tab is undefined\");\n        }\n    }\n    else if (info.menuItemId === \"summarizePage\") {\n        if (tab) {\n            summarizePage(tab.url);\n        }\n        else {\n            console.error(\"Tab is undefined\");\n        }\n    }\n    else if (info.menuItemId === \"addJournalEntry\") {\n        if (info.selectionText) {\n            addJournalEntry(info.selectionText);\n        }\n        else {\n            console.error(\"No selection text\");\n        }\n    }\n    else if (info.menuItemId === \"summarizePage\") {\n        if (tab) {\n            summarizePage(tab.url);\n        }\n        else {\n            console.error(\"Tab is undefined\");\n        }\n    }\n});\n// Existing functions...\nfunction summarizePage(url) {\n    const content = document.body.innerText;\n    // Summarize the page logic\n    console.log(\"Summarizing page:\", { url, content });\n    // Implement your summarization logic here\n}\nfunction addJournalEntry(selectionText) {\n    // Add journal entry logic\n    console.log(\"Adding journal entry:\", selectionText);\n    // Implement your journal entry logic here\n}\nexport {};\n// function saveBookmarkCallApi(data) {\n//   console.log(\"Inside saveBookmarkCallApi\", data);\n//   try {\n//     // const res = _bookmarkAccountService.createBookmark({\n//     //   title: data.title,\n//     //   url: data.url,\n//     //   text: data.text,\n//     // });\n//     let res ={}\n//     //  res = axios.post(\"http://localhost:3000/api/bookmarks\", data);\n//     // https://fakestoreapi.com/products\n//     // res = axios.get(\"https://fakestoreapi.com/products\")\n//     console.log(\"Response from saveBookmarkCallApi\", res);\n//     return res;\n//   } catch (error) {\n//     console.error(\"Error in saveBookmarkCallApi:\", error);\n//   }\n// }\n"],"names":[],"sourceRoot":""}